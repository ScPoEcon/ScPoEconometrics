ScPoEconometrics 2
========================================================
author: Florian Oswald
date: `r Sys.Date()`
autosize: true
css: ../style.css

Working With Data
========================================================
incremental: true
class: small-code


* Econometrics is about Data.
* In these slides we will start to look at this.
* Let's first all load a dataset:

```{r}
data("mpg",package="ggplot2")
```

* how many observations, how many variables?
```{r}
dim(mpg)
```



The mpg dataset
==============
class: small-code
incremental: true

* And let's look at the first couple of rows:
```{r}
head(mpg)
```

* `tail` gives you the last rows.
* `names` gives the column names.

The mpg dataset: datatypes
==============
class: small-code
incremental: true

* It's important to know how the data is stored.
* We use `str`:

```{r}
str(mpg)
```

Summarizing Data
================
incremental:true

* One can learn only *so much* from looking at the `data.frame`.
* Even if you could *see* all rows of the dataset, you would not know very much **about it**.
* We need to **summarize** the data for us to learn from it.
* In general, we can compute summary statistics, or visualize the data with plots.
* Let's start with some statistics first!
* Let's look at two features: *central tendency* and *spread*.

Central Tendency
================
incremental:true
class: small-code


1. `mean(x)`: the average of all values in `x`.
1. `median`: the value $x_j$ below and above which 50% of the values in `x` lie.

```{r}
x <- c(1,2,2,2,2,100)
mean(x)
mean(x) == sum(x) / length(x)
median(x)
```

Spread
======
incremental:true
class: small-code


* Another interesting feature is how much a variable is *spread out* about it's center (mean or median).
* The *variance* is such a measure.
```{r}
var(x)
all.equal(var(x), sum((x - mean(x))^2) / (length(x)-1))
```
* Similarly, the `range` is
```{r}
range(x)
```


The table function
=================
incremental:true
class: small-code

* `table(x)` is a useful function that counts the occurence of each unique value in `x`:
```{r}
table(x)
table(mpg$trans)
```

Crosstables
=================
incremental:true
class: small-code

* Given two vectors, `table` produces a contingency table:
```{r}
table(mpg$trans,mpg$drv)
```
* with `prop.table`, we can get proportions:
```{r,eval=FALSE}
prop.table(table(mpg$trans,mpg$drv),margin=2)
```


Plotting
========

* `R` base plotting is fairly good.
* There is an extremely powerful alternative in package `ggplot2`. We'll see both.
* A `hist`ogram counts how many obserations fall within a certain bin.

Histogram
===============
class: small-code

```{r,fig.align='center'}
hist(mpg$cty)
```

Nicer Histogram
===============
class: small-code

```{r,fig.align='center'}
hist(mpg$cty, xlab   = "Miles Per Gallon (City)", main   = "Histogram of MPG (City)", breaks = 12, col = "red",border = "blue")
```


Looking for Outliers: Boxplots
====================
class: small-code

* It's good to know if a variable has *outliers*, i.e. values much more extreme than the mass of all values.
```{r,fig.align='center',echo=FALSE,fig.height=8,fig.width=10}
boxplot(hwy ~ drv, data = mpg, xlab   = "Drivetrain (f = FWD, r = RWD, 4 = 4WD)", ylab   = "Miles Per Gallon (Highway)", main   = "MPG (Highway) vs Drivetrain", pch = 20,cex = 2,col ="darkorange",border = "dodgerblue")
```

Scatter Plots
============
incremental:true
class: small-code

* Two variables $x$ and $y$
* Natural to ask: How often do certain pairs of $(x_i,y_i)$ occur?
```{r}
head(mpg[,c("hwy","displ")])
```
* That's what a scatter plots shows.

Scatter Plots
============
incremental:true
class: small-code

```{r,fig.align='center'}
plot(hwy ~ displ, data = mpg)
```

It's Tutorial Time!
====================
type: alert

Time for our first tutorial!! Type this into your `RStudio` console:

```{r,eval=FALSE}
library(ScPoEconometrics)
runTutorial('chapter2')
```

How are x and y related? Covariance
==========================


```{r x-y-corr,echo=FALSE,message=FALSE,warning=FALSE,fig.align='center'}
library(mvtnorm)
set.seed(10)
cor = 0.9
sig = matrix(c(1,cor,cor,1),c(2,2))
ndat = data.frame(rmvnorm(n=300,sigma = sig))
x = ndat$X1
y = ndat$X2
par(pty="s")
plot(x ~ y, xlab="x",ylab="y")
```

The [relevant section in the book](https://scpoecon.github.io/ScPoEconometrics/sum.html#summarize-two) is **mandatory** reading.

Correlation App
==============

```{r,eval=FALSE}
library(ScPoEconometrics)
runTutorial('correlation')
```


The Tidyverse
==========
incremental: true

* [Hadley Wickham](http://hadley.nz)
* What is *tidy* data?
  1. Each variable is a column
  1. Each observation is a row
  1. Each value is a cell.
* That's not always how we get data.
* Some tools first.



tibbles are tidy data.frames
==========================
class: small-code
incremental: true

```{r}
library(tidyr)  # also loads library(tibble)
data(mpg,package = "ggplot2")  # data from the ggplot2 package
mpg
```

Subsetting tibbles
=================
incremental:true

* Same as before.

```{r}
# mpg[row condition, col condition]
mpg[mpg$hwy > 35, c("manufacturer", "model", "year")]
```

Enter: dplyr
============
class: small-code
incremental:true

* Very powerful package. [Check it out!](https://dplyr.tidyverse.org)

```{r}
library(dplyr)
mpg %>%    # %>% is the "pipe" operator
  filter(hwy > 35) %>%  # takes output and puts into next function
  select(manufacturer, model, year)
```

```{r,eval=FALSE}
# as such, equivalent to
select(filter(mpg, hwy > 35), manufacturer, model, year)
```


Case Study: How to Read xls data
=================================

* Excel (or other spreadsheet) data is ubiquous.
* Unfortunately it doesn't always come in a easy to use form to us.
* We need to *clean* it.
* Let's go through the worked example [in the book](https://scpoecon.github.io/ScPoEconometrics/sum.html#the-tidyverse)!
